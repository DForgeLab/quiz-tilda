const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    // –ü–∞–ø–∫–∏ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    watchDirs: ['js', 'css', 'img'],
    // –§–∞–π–ª—ã –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    watchFiles: ['index.html', 'build.js'],
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
    buildCommand: 'node build.js --base-url=',
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
    debounceDelay: 1000
};

let buildTimeout = null;
let isBuilding = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏
function runBuild() {
    if (isBuilding) {
        console.log('‚è≥ –°–±–æ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
        return;
    }

    isBuilding = true;

    exec(config.buildCommand, (error, stdout, stderr) => {
        isBuilding = false;

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏:', error.message);
            return;
        }

        if (stderr) {
            console.error('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', stderr);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏ (debounce)
function scheduleBuild() {
    if (buildTimeout) {
        clearTimeout(buildTimeout);
    }

    buildTimeout = setTimeout(() => {
        runBuild();
    }, config.debounceDelay);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –ø–∞–ø–∫–æ–π
function watchDirectory(dirPath) {
    if (!fs.existsSync(dirPath)) {
        console.log(`‚ö†Ô∏è –ü–∞–ø–∫–∞ ${dirPath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
        return;
    }

    console.log(`üëÄ –ù–∞–±–ª—é–¥–∞—é –∑–∞ –ø–∞–ø–∫–æ–π: ${dirPath}/`);

    fs.watch(dirPath, { recursive: true }, (eventType, filename) => {
        if (filename) {
            console.log(`üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ ${dirPath}/${filename} (${eventType})`);
            scheduleBuild();
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Ñ–∞–π–ª–æ–º
function watchFile(filePath) {
    if (!fs.existsSync(filePath)) {
        console.log(`‚ö†Ô∏è –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
        return;
    }

    console.log(`üëÄ –ù–∞–±–ª—é–¥–∞—é –∑–∞ —Ñ–∞–π–ª–æ–º: ${filePath}`);

    fs.watchFile(filePath, (curr, prev) => {
        if (curr.mtime !== prev.mtime) {
            console.log(`üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ: ${filePath}, –∑–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É...`);
            scheduleBuild();
        }
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function startWatching() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ñ–∞–π–ª–æ–≤—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å...\n');

    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –ø–∞–ø–∫–∞–º–∏
    config.watchDirs.forEach(dir => {
        watchDirectory(dir);
    });

    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —Ñ–∞–π–ª–∞–º–∏
    config.watchFiles.forEach(file => {
        watchFile(file);
    });

    console.log('\n‚úÖ –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!');
    console.log('üè† –†–µ–∂–∏–º: –õ–û–ö–ê–õ–¨–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê');
    console.log('üìÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞–ø–∫–∏:', config.watchDirs.join(', '));
    console.log('üìÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã:', config.watchFiles.join(', '));
    console.log(`‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏: ${config.debounceDelay}ms`);
    console.log('\nüí° –ò–∑–º–µ–Ω–∏—Ç–µ –ª—é–±–æ–π —Ñ–∞–π–ª –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞–ø–∫–∞—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏');
    console.log('üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n');

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É
    runBuild();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
    console.log('\n\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è...');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
startWatching();
