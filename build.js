const fs = require('fs');
const path = require('path');

// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const baseUrlArg = args.find(arg => arg.startsWith('--base-url='));
const baseUrl = baseUrlArg ? baseUrlArg.split('=')[1] : 'https://dforgelab.github.io/quiz-tilda';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏
const config = {
    // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –≤—Å–µ—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    // GitHub Raw URL —Ñ–æ—Ä–º–∞—Ç: https://raw.githubusercontent.com/USERNAME/REPO/BRANCH/PATH
    baseUrl: baseUrl,

    // CSS —Ñ–∞–π–ª—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    cssFiles: [
        'css/fancybox.css',
        'css/style.css',
        'css/ion.rangeSlider.css',
        'css/swiper-bundle.min.css',
        'css/swiper.css'
    ],

    // JS —Ñ–∞–π–ª—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    jsFiles: [
        'js/jquery-3.7.1.min.js',
        'js/swiper-bundle.min.js',
        'js/fancybox.js',
        'js/imask.js',
        'js/ion.rangeSlider.min.js',
        'js/nice-select2.js',
        'js/functions.js',
        'js/script.js'
    ],

    // –í—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    output: {
        html: 'index.html',
        css: 'styles.css',
        // JS —Ñ–∞–π–ª—ã –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function readFile(filename) {
    try {
        return fs.readFileSync(filename, 'utf8');
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filename}:`, error.message);
        return '';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
function writeFile(filename, content) {
    try {
        fs.writeFileSync(filename, content, 'utf8');
        console.log(`‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${filename}`);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ ${filename}:`, error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
function copyDirRecursive(src, dest) {
    if (!fs.existsSync(dest)) {
        fs.mkdirSync(dest, { recursive: true });
    }

    const files = fs.readdirSync(src);
    files.forEach(file => {
        const srcPath = path.join(src, file);
        const destPath = path.join(dest, file);
        const stat = fs.statSync(srcPath);

        if (stat.isDirectory()) {
            copyDirRecursive(srcPath, destPath);
        } else {
            fs.copyFileSync(srcPath, destPath);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL –∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
function addBaseUrl(html) {
    if (!config.baseUrl) return html;

    // –£–±–∏—Ä–∞–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ baseUrl –µ—Å–ª–∏ –µ—Å—Ç—å
    const baseUrl = config.baseUrl.replace(/\/$/, '');

    // –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ CSS –∏ JS —Ñ–∞–π–ª—ã
    let updatedHtml = html
        .replace(/href="([^"]*\.css)"/g, (match, url) => {
            if (url.startsWith('/') || url.startsWith('http') || url.startsWith('#')) {
                return match; // –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            }
            return `href="${baseUrl}/${url}"`;
        })
        .replace(/src="([^"]*\.js)"/g, (match, url) => {
            if (url.startsWith('/') || url.startsWith('http') || url.startsWith('#')) {
                return match; // –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            }
            return `src="${baseUrl}/${url}"`;
        })
        .replace(/src="([^"]*\.(jpg|png|svg|gif|webp|jpeg))"/g, (match, url) => {
            if (url.startsWith('/') || url.startsWith('http') || url.startsWith('#')) {
                return match; // –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            }
            return `src="${baseUrl}/${url}"`;
        })
        .replace(/xlink:href="([^"]*\.svg[^"]*)"/g, (match, url) => {
            if (url.startsWith('/') || url.startsWith('http') || url.startsWith('#')) {
                return match; // –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            }
            return `xlink:href="${baseUrl}/${url}"`;
        });

    return updatedHtml;
}
    
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è CSS —Ñ–∞–π–ª–æ–≤
function combineCSS() {
    console.log('üì¶ –û–±—ä–µ–¥–∏–Ω—è—é CSS —Ñ–∞–π–ª—ã...');
    let combinedCSS = '';

    config.cssFiles.forEach(filename => {
        const content = readFile(filename);
        if (content) {
            combinedCSS += `/* ===== ${filename} ===== */\n`;
            combinedCSS += content;
            combinedCSS += '\n\n';
        }
    });

    return combinedCSS;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è JS —Ñ–∞–π–ª–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ
function copyJSFiles() {
    console.log('üì¶ –ö–æ–ø–∏—Ä—É—é JS —Ñ–∞–π–ª—ã...');

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É js –≤ dist
    const jsDir = path.join('dist', 'js');
    if (!fs.existsSync(jsDir)) {
        fs.mkdirSync(jsDir, { recursive: true });
    }

    config.jsFiles.forEach(filename => {
        const content = readFile(filename);
        if (content) {
            const outputPath = path.join(jsDir, path.basename(filename));
            writeFile(outputPath, content);
            console.log(`‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: ${filename}`);
        }
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏
function build() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞...\n');

    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const outputDir = 'dist';
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir);
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º CSS
    const combinedCSS = combineCSS();
    writeFile(path.join(outputDir, config.output.css), combinedCSS);

    // –ö–æ–ø–∏—Ä—É–µ–º JS —Ñ–∞–π–ª—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    copyJSFiles();

    // –ö–æ–ø–∏—Ä—É–µ–º HTML –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
    const htmlContent = readFile('index.html');
    if (htmlContent) {
        const updatedHtml = addBaseUrl(htmlContent);
        writeFile(path.join(outputDir, config.output.html), updatedHtml);
        console.log('‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω HTML —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤—ã–º URL');
    } else {
        console.error('‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π index.html –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }

    // –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    const imgDir = 'img';
    const outputImgDir = path.join(outputDir, 'img');

    if (fs.existsSync(imgDir)) {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É img –≤ dist
        if (!fs.existsSync(outputImgDir)) {
            fs.mkdirSync(outputImgDir);
        }

        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ img
        const imgFiles = fs.readdirSync(imgDir);
        imgFiles.forEach(file => {
            const srcPath = path.join(imgDir, file);
            const destPath = path.join(outputImgDir, file);
            const stat = fs.statSync(srcPath);

            if (stat.isDirectory()) {
                // –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                copyDirRecursive(srcPath, destPath);
                console.log(`‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: img/${file}/`);
            } else {
                // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                fs.copyFileSync(srcPath, destPath);
                console.log(`‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: img/${file}`);
            }
        });
    } else {
        console.error('‚ùå –ü–∞–ø–∫–∞ img –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }

    console.log('\n‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ: ${outputDir}/`);
    console.log(`üìÑ HTML: ${config.output.html}`);
    console.log(`üé® CSS: ${config.output.css}`);
    console.log(`‚ö° JS: –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ js/`);
    if (config.baseUrl) {
        console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${config.baseUrl}`);
        console.log('üöÄ –†–µ–∂–∏–º: –ü–†–û–î–ê–ö–®–ù (GitHub Pages)');
    } else {
        console.log('üè† –†–µ–∂–∏–º: –õ–û–ö–ê–õ–¨–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê');
        console.log('üåê –ë–∞–∑–æ–≤—ã–π URL: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏)');
    }
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–∏ —Ñ–∞–π–ª—ã –≤ –¢–∏–ª—å–¥—É!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
build();
